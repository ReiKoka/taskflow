/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PublicAboutImport } from './routes/_public/about'
import { Route as AuthenticatedWorkspacesWorkspaceIdImport } from './routes/_authenticated/workspaces/$workspaceId'
import { Route as AuthenticatedWorkspacesWorkspaceIdIndexImport } from './routes/_authenticated/workspaces/$workspaceId.index'
import { Route as AuthenticatedWorkspacesWorkspaceIdMembersImport } from './routes/_authenticated/workspaces/$workspaceId.members'
import { Route as AuthenticatedWorkspacesWorkspaceIdBoardIdImport } from './routes/_authenticated/workspaces/$workspaceId.$boardId'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const PublicAboutRoute = PublicAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)

const AuthenticatedWorkspacesWorkspaceIdRoute =
  AuthenticatedWorkspacesWorkspaceIdImport.update({
    id: '/workspaces/$workspaceId',
    path: '/workspaces/$workspaceId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedWorkspacesWorkspaceIdIndexRoute =
  AuthenticatedWorkspacesWorkspaceIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedWorkspacesWorkspaceIdRoute,
  } as any)

const AuthenticatedWorkspacesWorkspaceIdMembersRoute =
  AuthenticatedWorkspacesWorkspaceIdMembersImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => AuthenticatedWorkspacesWorkspaceIdRoute,
  } as any)

const AuthenticatedWorkspacesWorkspaceIdBoardIdRoute =
  AuthenticatedWorkspacesWorkspaceIdBoardIdImport.update({
    id: '/$boardId',
    path: '/$boardId',
    getParentRoute: () => AuthenticatedWorkspacesWorkspaceIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutImport
      parentRoute: typeof PublicImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicImport
    }
    '/_authenticated/workspaces/$workspaceId': {
      id: '/_authenticated/workspaces/$workspaceId'
      path: '/workspaces/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof AuthenticatedWorkspacesWorkspaceIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/workspaces/$workspaceId/$boardId': {
      id: '/_authenticated/workspaces/$workspaceId/$boardId'
      path: '/$boardId'
      fullPath: '/workspaces/$workspaceId/$boardId'
      preLoaderRoute: typeof AuthenticatedWorkspacesWorkspaceIdBoardIdImport
      parentRoute: typeof AuthenticatedWorkspacesWorkspaceIdImport
    }
    '/_authenticated/workspaces/$workspaceId/members': {
      id: '/_authenticated/workspaces/$workspaceId/members'
      path: '/members'
      fullPath: '/workspaces/$workspaceId/members'
      preLoaderRoute: typeof AuthenticatedWorkspacesWorkspaceIdMembersImport
      parentRoute: typeof AuthenticatedWorkspacesWorkspaceIdImport
    }
    '/_authenticated/workspaces/$workspaceId/': {
      id: '/_authenticated/workspaces/$workspaceId/'
      path: '/'
      fullPath: '/workspaces/$workspaceId/'
      preLoaderRoute: typeof AuthenticatedWorkspacesWorkspaceIdIndexImport
      parentRoute: typeof AuthenticatedWorkspacesWorkspaceIdImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedWorkspacesWorkspaceIdRouteChildren {
  AuthenticatedWorkspacesWorkspaceIdBoardIdRoute: typeof AuthenticatedWorkspacesWorkspaceIdBoardIdRoute
  AuthenticatedWorkspacesWorkspaceIdMembersRoute: typeof AuthenticatedWorkspacesWorkspaceIdMembersRoute
  AuthenticatedWorkspacesWorkspaceIdIndexRoute: typeof AuthenticatedWorkspacesWorkspaceIdIndexRoute
}

const AuthenticatedWorkspacesWorkspaceIdRouteChildren: AuthenticatedWorkspacesWorkspaceIdRouteChildren =
  {
    AuthenticatedWorkspacesWorkspaceIdBoardIdRoute:
      AuthenticatedWorkspacesWorkspaceIdBoardIdRoute,
    AuthenticatedWorkspacesWorkspaceIdMembersRoute:
      AuthenticatedWorkspacesWorkspaceIdMembersRoute,
    AuthenticatedWorkspacesWorkspaceIdIndexRoute:
      AuthenticatedWorkspacesWorkspaceIdIndexRoute,
  }

const AuthenticatedWorkspacesWorkspaceIdRouteWithChildren =
  AuthenticatedWorkspacesWorkspaceIdRoute._addFileChildren(
    AuthenticatedWorkspacesWorkspaceIdRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedWorkspacesWorkspaceIdRoute: typeof AuthenticatedWorkspacesWorkspaceIdRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedWorkspacesWorkspaceIdRoute:
    AuthenticatedWorkspacesWorkspaceIdRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicAboutRoute: typeof PublicAboutRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutRoute: PublicAboutRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof PublicAboutRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/workspaces/$workspaceId': typeof AuthenticatedWorkspacesWorkspaceIdRouteWithChildren
  '/workspaces/$workspaceId/$boardId': typeof AuthenticatedWorkspacesWorkspaceIdBoardIdRoute
  '/workspaces/$workspaceId/members': typeof AuthenticatedWorkspacesWorkspaceIdMembersRoute
  '/workspaces/$workspaceId/': typeof AuthenticatedWorkspacesWorkspaceIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof PublicAboutRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/workspaces/$workspaceId/$boardId': typeof AuthenticatedWorkspacesWorkspaceIdBoardIdRoute
  '/workspaces/$workspaceId/members': typeof AuthenticatedWorkspacesWorkspaceIdMembersRoute
  '/workspaces/$workspaceId': typeof AuthenticatedWorkspacesWorkspaceIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/about': typeof PublicAboutRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_authenticated/workspaces/$workspaceId': typeof AuthenticatedWorkspacesWorkspaceIdRouteWithChildren
  '/_authenticated/workspaces/$workspaceId/$boardId': typeof AuthenticatedWorkspacesWorkspaceIdBoardIdRoute
  '/_authenticated/workspaces/$workspaceId/members': typeof AuthenticatedWorkspacesWorkspaceIdMembersRoute
  '/_authenticated/workspaces/$workspaceId/': typeof AuthenticatedWorkspacesWorkspaceIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/register'
    | '/workspaces/$workspaceId'
    | '/workspaces/$workspaceId/$boardId'
    | '/workspaces/$workspaceId/members'
    | '/workspaces/$workspaceId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/register'
    | '/workspaces/$workspaceId/$boardId'
    | '/workspaces/$workspaceId/members'
    | '/workspaces/$workspaceId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_public/about'
    | '/_public/login'
    | '/_public/register'
    | '/_authenticated/workspaces/$workspaceId'
    | '/_authenticated/workspaces/$workspaceId/$boardId'
    | '/_authenticated/workspaces/$workspaceId/members'
    | '/_authenticated/workspaces/$workspaceId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/workspaces/$workspaceId"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/about",
        "/_public/login",
        "/_public/register"
      ]
    },
    "/_public/about": {
      "filePath": "_public/about.tsx",
      "parent": "/_public"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx",
      "parent": "/_public"
    },
    "/_authenticated/workspaces/$workspaceId": {
      "filePath": "_authenticated/workspaces/$workspaceId.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/workspaces/$workspaceId/$boardId",
        "/_authenticated/workspaces/$workspaceId/members",
        "/_authenticated/workspaces/$workspaceId/"
      ]
    },
    "/_authenticated/workspaces/$workspaceId/$boardId": {
      "filePath": "_authenticated/workspaces/$workspaceId.$boardId.tsx",
      "parent": "/_authenticated/workspaces/$workspaceId"
    },
    "/_authenticated/workspaces/$workspaceId/members": {
      "filePath": "_authenticated/workspaces/$workspaceId.members.tsx",
      "parent": "/_authenticated/workspaces/$workspaceId"
    },
    "/_authenticated/workspaces/$workspaceId/": {
      "filePath": "_authenticated/workspaces/$workspaceId.index.tsx",
      "parent": "/_authenticated/workspaces/$workspaceId"
    }
  }
}
ROUTE_MANIFEST_END */
